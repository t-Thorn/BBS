<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.Thorn.dao.userMapper">
    <resultMap id="BaseResultMap" type="com.Thorn.model.user">
        <constructor>
            <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="password" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="age" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="gender" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="identity" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="level" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="photo" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="regdate" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
            <arg column="fans" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="myPostnum" javaType="java.lang.Integer" jdbcType="INTEGER"/>

        </constructor>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="com.Thorn.model.userWithBLOBs">
        <constructor>
            <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="password" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="age" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="gender" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="identity" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="level" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="photo" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="regdate" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
            <arg column="fans" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="myPostnum" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="attention" javaType="java.lang.String" jdbcType="LONGVARCHAR"/>
            <arg column="history" javaType="java.lang.String" jdbcType="LONGVARCHAR"/>
            <arg column="collections" javaType="java.lang.String" jdbcType="LONGVARCHAR"/>
        </constructor>
    </resultMap>
    <sql id="Blob_Column_List">
        attention, history, collections
    </sql>
    <resultMap id="SimpleInfo" type="com.Thorn.model.user">
        <constructor>
            <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="photo" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="myPostnum" javaType="java.lang.Integer" jdbcType="INTEGER"/>
        </constructor>
    </resultMap>


    <insert id="insert" parameterType="com.Thorn.model.userWithBLOBs">
        insert into user (username, password, name,
        age, gender, identity,
        level, photo, regdate,
        fans, attention, history,
        collections)
        values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
        #{name,jdbcType=VARCHAR},
        #{age,jdbcType=INTEGER}, #{gender,jdbcType=VARCHAR}, #{identity,jdbcType=VARCHAR},
        #{level,jdbcType=INTEGER}, #{photo,jdbcType=VARCHAR}, #{regdate,jdbcType=TIMESTAMP},
        #{fans,jdbcType=INTEGER}, #{attention,jdbcType=LONGVARCHAR},
        #{history,jdbcType=LONGVARCHAR},
        #{collections,jdbcType=LONGVARCHAR})
    </insert>

    <insert id="insertSelective" parameterType="com.Thorn.model.userWithBLOBs">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="username != null">
                username,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="age != null">
                age,
            </if>
            <if test="gender != null">
                gender,
            </if>
            <if test="identity != null">
                identity,
            </if>
            <if test="level != null">
                level,
            </if>
            <if test="photo != null">
                photo,
            </if>
            <if test="regdate != null">
                regdate,
            </if>
            <if test="fans != null">
                fans,
            </if>
            <if test="attention != null">
                attention,
            </if>
            <if test="history != null">
                history,
            </if>
            <if test="collections != null">
                collections,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="age != null">
                #{age,jdbcType=INTEGER},
            </if>
            <if test="gender != null">
                #{gender,jdbcType=VARCHAR},
            </if>
            <if test="identity != null">
                #{identity,jdbcType=VARCHAR},
            </if>
            <if test="level != null">
                #{level,jdbcType=INTEGER},
            </if>
            <if test="photo != null">
                #{photo,jdbcType=VARCHAR},
            </if>
            <if test="regdate != null">
                #{regdate,jdbcType=TIMESTAMP},
            </if>
            <if test="fans != null">
                #{fans,jdbcType=INTEGER},
            </if>
            <if test="attention != null">
                #{attention,jdbcType=LONGVARCHAR},
            </if>
            <if test="history != null">
                #{history,jdbcType=LONGVARCHAR},
            </if>
            <if test="collections != null">
                #{collections,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>

    <select id="getSimpleInfo" resultMap="SimpleInfo" parameterType="string">
        SELECT username,name,photo,myPostnum from user where username =#{0}
    </select>

    <resultMap id="UserResultMap" type="com.Thorn.model.user">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="name" property="name"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <result column="identity" property="identity"/>
        <result column="level" property="level"/>
        <result column="photo" property="photo"/>
        <result column="regdate" property="regdate"/>
        <result column="attentionnum" property="attentionnum"/>
        <result column="history" property="history"/>
        <result column="attention" property="attention"/>
        <result column="collections" property="collections"/>
    </resultMap>

    <insert id="InsertUser" parameterType="com.Thorn.model.user" useGeneratedKeys="true"
            keyProperty="id">
        insert into user(username,password,identity,regdate,name)
        values(#{username},#{password},#{identity},#{regdate},#{name})
    </insert>

    <select id="findAllUser" resultMap="ResultMapWithBLOBs" parameterType="com.Thorn.model.user">
        select * from user
    </select>

    <select id="login" resultMap="ResultMapWithBLOBs" parameterType="String">
        select * from user where username=#{username}
    </select>


    <update id="updateUser" parameterType="com.Thorn.model.user">
        update user set name=#{name},age=#{age},identity=#{identity},gender=#{gender} where username=#{username}
    </update>

    <update id="updatePwd" parameterType="com.Thorn.model.user">
        update user set password=#{password} where username=#{username}
    </update>

    <update id="updatePhoto" parameterType="com.Thorn.model.user">
        update user set photo=#{photo} where username=#{username}
    </update>

    <select id="getUserByPage" resultType="com.Thorn.model.user">
        select * from user limit #{0},#{1}
    </select>

    <update id="updateHistory" parameterType="com.Thorn.model.userWithBLOBs">
        update user set history=#{history} where username=#{username}
    </update>

    <select id="findoneID" resultType="com.Thorn.model.user">
        select * from user where identity=#{identity}
    </select>

    <select id="findusername" resultMap="BaseResultMap" parameterType="String">
        select * from user where username=#{username}
    </select>

    <update id="updateMyPostnum" parameterType="com.Thorn.model.userWithBLOBs">
        update user set myPostnum=#{myPostnum} where username=#{username}
    </update>

    <update id="updateCollections" parameterType="com.Thorn.model.userWithBLOBs">
        update user set collections=#{collections} where username=#{username}
    </update>
</mapper>